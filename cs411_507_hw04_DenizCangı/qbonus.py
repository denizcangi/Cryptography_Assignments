# -*- coding: utf-8 -*-
"""Qbonus.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x5m9pIpaRfVpnR0QTe0Oq4ZgILn27IRM
"""

from DSA import modinv, egcd
from Crypto.Hash import SHA3_256
from Crypto.Hash import SHAKE128

q = 15141339084211537780798402821468668253233855293250282470707486523729
p = 15459352678170194999059797953835943703769299798522640485949251021230061239872933286596281671875036444766767260825161156339142374953144264667175663093532210016977000296281428180052962512096930034626707240943073909429948568647175489641923947055523690662397275499814011659615933313001220733558180164993086472379325887209418439076036830595968948122463542565488458285559269152814846930461678806155717771594791617514000333739836058367191702301817095873715810768950392576601345434651042282496258898798293897916341315693731763534513871295870117294672305447940132333142894162790759196704240972899412016593006223087871357404969
g = 3800569625008648766049545537807478639158256666453837543156865205157342453175195338293914518318389932512419197022492193267072466754594620461534567362497841710002599111953091344930343994503431071692400525354528547918075410538790275781900267312641988973075426468087022427855954288858299458927808889518984317490141729401786342725042250941182574740334793901912974170222604015177323368814264989835679407076289974855552414398779625521837257916022552980027627057473062644879659632681204107806120144998907991338913266334321160324651484012752441634140243465730939619242515280714356873699965985363402010686851443396200018800199
beta = 13811718194912887731259973687531659017221233072693758339320677556085961091741512534312991319990988012320895125273138799484930424656328618986338233650799555131896857586001490595604365368085682743275712428137943225119715628405892357306029150574584119785832325605674838801154641895745311161271889436502899846458131900988387777254676157672199525938326470244363881227814557082187788046660952433631553517068095734365024876910709029416850114854064043338879940542901936624969303248595208108795751225387203405395739941042570698164719973037261394764330314120509607344408485820133307388882699955010320183318447065675487861322141


message1, r_1, s_1 = b"He who laugh last didn't get the joke", 7807207725923213670059456706077357545604668400924354746850607726310, 10137413521818981860558295844142463248736280669671376607939774420169
message2, r_2, s_2 = b"Ask me no questions, and I'll tell you no lies", 13601517662990253244919392623006368173804524139680316147330845851641, 5354638027707905626045156057361096890377811387248394522419069236340

#find the hash values of the given messages
shake_1 = SHAKE128.new(message1)
h_1 = int.from_bytes(shake_1.read(q.bit_length()//8), byteorder='big')

shake_2 = SHAKE128.new(message2)
h_2 = int.from_bytes(shake_2.read(q.bit_length()//8), byteorder='big')

found = False
x = 2
#try possible multiples of the first signature's session key
while found == False:
  first_operand = (s_1*h_2 - s_2*h_1*x)
  second_operand = modinv((s_2 * r_1 * x)%q - (s_1*r_2)%q ,q)
  #calculate a for all the possible multiples
  a = (first_operand * second_operand) % q
  #if beta is equal to g√¢ mod(p) then we have found the correct private key with correct multiple
  if beta == pow(g,a,p):
    print("x is", x, "and a is", a)
    found = True

  x = x+1