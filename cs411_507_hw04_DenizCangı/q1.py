# -*- coding: utf-8 -*-
"""Q1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nRAQMs-2Q_xzteyp9nvy_Ze2HpF-FvAz
"""

import random
import requests

API_URL = 'http://cryptlygos.pythonanywhere.com'

my_id = 25427   ## Change this to your ID

endpoint = '{}/{}/{}'.format(API_URL, "RSA_Oracle", my_id )
response = requests.get(endpoint) 	
c, N, e = 0,0,0 
if response.ok:	
  res = response.json()
  print(res)
  c, N, e = res['c'], res['N'], res['e']    #get c, N, e
else: print(response.json())

######
from myntl import egcd, modinv
#find an integer x that is relatively prime to N
x = 2
a, b, d = egcd(N,x)

while a!=1:
  x = x+1
  a, b, d = egcd(N,x)

#get the xÃª mod(N)
y = pow(x, e, N)
#calculate the c_ that will be send to the oracle 
c_ = (c*y) % N

###### Query Oracle it will return corresponding plaintext
endpoint = '{}/{}/{}/{}'.format(API_URL, "RSA_Oracle_query", my_id, c_)
response = requests.get(endpoint) 	
if(response.ok): m_ = (response.json()['m_'])
else:print(response)

####

#From query we get m_ = c_^d mod(N). 
#Since c_ =c*y  mod(N) then  m_ = (c*y)^d mod(N) and c^d = m
#then m_ = c^d * y^d mod(N) and y^d = x^(e*d) mod(N) = x 
#If we get the inverse of x mod(N) using modinv from myntl.py and multiply it with m_ mod(N) we get m. 
#m = x^(-1)*m_ mod(N)

m = (m_* modinv(x, N)) % N

#Then convert the message into bytes and send it to the server as res.

res = m.to_bytes((m.bit_length()+7)//8, byteorder='big')
print(res)

###Send your answer to the server.
endpoint = '{}/{}/{}/{}'.format(API_URL, "RSA_Oracle_checker", my_id, res)
response = requests.put(endpoint)
print(response.json())